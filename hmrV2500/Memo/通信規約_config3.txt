===Accele===
'a'
0x00 データ
	x[2],y[2],z[2]
	いずれもLow-High byte

0x10 データ送信開始
0x11 データ送信終了

===Battery===
'b'
0x00 データ
	Battery1[2], Battery2[2], Battery3[2]...

0x10 データ送信開始
0x11 データ送信終了

===CO2===
'C'
0x00 データ
	Data[2]

0x10 データ送信開始
0x11 データ送信終了

0x20 センサーON
0x21 センサーOFF

0x20 ポンプON
0x21 ポンプOFF

===Compass===
'c'
0x00 データ
	x[2],y[2],z[2]
	いずれもLow-High byte

0x10 データ送信開始
0x11 データ送信終了

===DeviceManager===
'D'
モード取得コマンド
>> 0xA0 
<< 0xA0, DeviceManageMode, ClockModeSpeed, CommunicationMode  
	DeviceManageMode : 0x00:normal, 0x10:sleep, 0x20:roaming  
	ClockModeSpeed   : 0x00:normal, 0x01:low, 0x02:high  
	CommunicationMode: 0x00:RF, 0x01:MP

Device Manage Mode 設定 

スリープ設定コマンド（実行はされない）
>> 0x10, 0x10, secSleepLength[2],secRemLength[2]
	secSleepLength秒で睡眠サイクル。うち、secSleepLength秒だけレム状態。
	secSleepLengthはsint16の正数、つまり1〜32767秒≒9時間強が入る
<< 0x10, 0x10, secSleepLength[2],secRemLength[2],Code
	設定値と実行用コードが返ってくる

スリープ実行コマンド
>> 0x10, 0x11, Code
	実行用コードを送信して、実行を確認
		直前のスリープ設定コマンドで取得した実行用コードのみ有効
<< なし（入眠）
<< 0x10, 0xF1
	コードが異常な場合は、0xF1が戻る

ローミング設定コマンド（実行はされない）
>> 0x10, 0x20, secRoamLength[2]
	secRoamLength秒待機した後、元のモジュールに戻る(正確にはsecRoamLength秒ごとに探す相手を変える)
	secRoamLengthにはuint8の正数、つまり1〜255秒が入る
<< 0x10, 0x20,Length[2], Code, CommunicationMode
	実行用コードが返ってくる
	CommunicationMode : 変わる先のモードを返す	

ローミング実行コマンド
>> 0x10, 0x21,Code
	実行用コードを送信して、実行を確認
		直前のスリープ設定コマンドで取得した実行用コードのみ有効
<< なし（ローミング）
<< 0x10, 0xF2
	設定値が異常な場合は、0xF2が戻る

モードリセット（ノーマルモード実行）コマンド
>> 0x10, 0x00
	ノーマルモード
<< 0x10, 0x00


KILL設定コマンド（実行はされない）
>> 0x20
<< 0x20,Code
	設定値と実行用コードが返ってくる

KILL実行コマンド
>> 0x21,Code
	実行用コードを送信して、実行を確認
		直前のKILL設定コマンドで取得した実行用コードのみ有効
<< なし（永眠）
<< 0xF2
	設定値が異常な場合は、0xF2が戻る

クロック設定用コマンド
>> 0x30, Speed
	Speed : 0:normal, 1:low, 2:high 	
<< 0x30, Speed 

<< 0xF3  
   設定値がおかしいとき

===GPS===
'g'
0x00 データ
	Time[5], Latitude[4], NS[1], Longitude[4], EW[1], isSuccess[1], Altitude[3], GPSID[1]
		Time[5]=Hour,Minute,Second1,Second2,Second3
			Time Hour:Minute:Second1+0.01*Second2+0.0001*Second3
		Latitude[4]=Degree,Minute1,Minute2,Minute3
			Latitude Degree度 Minute1+0.01*Minute2+0.0001Minute3分
		NS[1]='N'|'S'
		Longitude[4]=Degree,Minute1,Minute2,Minute3
			Longitude Degree度 Minute1+0.01*Minute2+0.0001Minute3分
		EW[1]='E'|'W'
		isSuccess[1]=false|true
		Altitude[3]=Meter1,Meter2,Meter3
			Altitude 1000*Meter1+10*Meter2+0.1*Meter3
		GPSID[1]=GPSID

0x10 データ送信開始
0x11 データ送信終了

0x20 GPSの上下を変更
　<=>　GPSCh[1] 

===Gyro===
'G'
0x00 Null[1],Count[2],Roll[4],Pitch[4],Yaw[4]
	Nullはデバッグ用不要データ

0x10 データ送信開始
0x11 データ送信終了

===H2S===
'H'
0x00 データ
	Data[2]

0x10 データ送信開始
0x11 データ送信終了

===Humid===
'h'
0x00 データ
	Data[2]

0x10 データ送信開始
0x11 データ送信終了

===InfraRed===
'T'
0x00 データ
	Out[2],In[2]
	Out:赤外温度
	In:温度計内部温度

0x10 データ送信開始
0x11 データ送信終了

===Motor===
'm'
LeftMotor[1],LeftBrake[1],RightMotor[1],RightBrake[1]

===Thermo===
't'
0x00 データ
	Data[2]

0x10 データ送信開始
0x11 データ送信終了

===Sprite===
	Status
		0x00 : Idle
		0x10 : 写真サイズセット中
		0x11 : 写真サイズセット後、コマンドリセット中
		0x12 : 写真撮影中
		0x13 : 写真基礎データ取得中
		0x20 : 撮影データ取得中
		0x30 : 撮影終了
		0x40 : コマンドリセット中
		0xF0 : 電源リセット中
		0xFF : エラー

	内部情報
	<< 0xA0,現在のステータス[1],IsItfErr[1],ItfErrCode[1],IsMsgErr[1],MsgErrCode[1]
		内部情報
	<> 0xB0
		内部情報送信開始要求
	<> 0xB1
		内部情報送信停止要求

	写真データ
	>> 0x00,PictureSize[1]
		PictureSizeの写真を、単発で要求 0:S,1:M,2:L
	<< 0x00,PictureSize[1],AllDataSize[2]
		PictureSizeの写真の全データ数AllDataSize

	PCからのコマンドに関係なくデータがなくなるまで送信
	<< 0x01,DataPos[2],Data[...]
		先頭アドレスがDataPosの写真データData
		＜＜変更するかどうかあとで要相談＞＞

	写真送信モード
	このモードでは、PCからのコマンドに関係なく、写真を撮って、データを送ってを繰り返す。

	<> 0x10,DefaultPictureSize[1]
		DefaultPictureSizeの写真を、連続要求
	<> 0x11
		連続要求の停止

		＜＜連続要求の際の通信形式をどうするか検討必要＞＞
		どこからがデータ開始でどれだけの量があるかとか。
	　	0x00, 0x01系を使えば十分かと思うが…

	ライト
	<> 0x30
		ライトON
	<> 0x31
		ライトOFF
	<> 0x40
		自動フラッシュON
	<> 0x41
		自動フラッシュOFF

	パケットモード
	<> 0x50
		ミニパケットモードON
	<> 0x51
		ミニパケットモードOFF

	リセット
	<> 0x60
		内部リセット要求
	<> 0x70
		強制リセット要求
	<> 0x80
		自動リセットON
	<> 0x81
		自動リセットOFF


===SHT75===
'7'
	<< 0x00,ThermoData[2],HumidData[2]
		高精度データ取得
			ThermoData:12bitデータ Low-High
			HumidData:8bitデータ
	<< 0x01,ThermoData[2],HumidData[1]
		低精度データ取得
			ThermoData:14bitデータ Low-High
			HumidData:12bitデータ Low-High
	<> 0x10
		データ送信開始
	<> 0x11
		データ送信終了
	<> 0x20
		低精度データ取得モードON
	<> 0x21
		低精度データ取得モードOFF
	<> 0xE0
		リセット
	<< 0xFF,ErrCode[1]
		エラー発生通知
		ErrCode
			0x10:Thermo測定でI2Cがタイムアウト
			0x11:Humid測定でI2Cがタイムアウト